//This file tests that the appropriate variables
//are set correctly when the market fails to clear
//because there are no sellers (NULL clearing type)

//Bidding period: 3600 s
//Buyer1: bid 31, quantity: 5, period: 3600 s
//Buyer2: bid 47, quantity: 5, period: 3600 s
//Buyer3: bid 63, quantity: 5, period: 3600 s

//Expected clearing price: 63.0001
//Expected clearing quantity: 0

//There are no sellers so clearing price will be
//set 1 cent above the highest buyer bid

#set tmp=../test_markets_auction_no_sellers
#setenv GRIDLABD=../../../core

#define stylesheet=http://gridlab-d.svn.sourceforge.net/viewvc/gridlab-d/trunk/core/gridlabd-2_0

module market;
module tape;
module assert;

clock {
	timezone PST+8PDT;
	starttime '2001-01-01 00:00:00';
	stoptime '2001-01-03 00:00:00';
}

class auction {
    double current_price_mean_24h;
	double current_price_stdev_24h;
}

object auction {
	name Market_1;
	type DOUBLE;
	unit MWh;
	period 3600;
	verbose TRUE;
	special_mode NONE;
	warmup 0;
	init_price 63.0001;
	init_stdev 1e-6;
	object multi_recorder {
		property current_market.clearing_price,current_market.clearing_quantity,current_market.clearing_type,current_price_mean_24h,current_price_stdev_24h,buyer1:price,buyer1:quantity,buyer2:price,buyer2:quantity,buyer3:price,buyer3:quantity;
		file "test_markets_auction_no_sellers_output.csv";
		interval 3600;
		limit 168;
	};
	object double_assert {
		in '2001-01-01 01:00:00';
		value 63.0001;
		within 1e-4;
		target "current_market.clearing_price";
	};
	object double_assert {
		in '2001-01-01 01:00:00';
		value 0;
		within 1e-5;
		target "current_market.clearing_quantity";
	};
	object double_assert {
		value 63.0001;
		within 1e-4;
		target "current_price_mean_24h";
	};
	object double_assert {
		value 0;
		within 1e-5;
		target "current_price_stdev_24h";
	};
	object enum_assert {
		in '2001-01-01 01:00:00';
		value 0;	//NULL type
		target "current_market.clearing_type";
	};
}

// test object to create simple buyers and sellers
class test {
	int64 next_t;
	int64 new_bid_id;
	double bid_period;
	int16 count;
	object market;
	enumeration {BUYER=0, SELLER=1} role;
	int32 lastbid_id;
	int64 lastmkt_id;
	double price;		//Added in so price can be specified
	double quantity;	//Added in so quantity can be specified
	public int64 *thismkt_id;
	function auction::submit_bid;
	intrinsic create (object parent)
	{
		return SUCCESS;
	};
	intrinsic init (object parent)
	{
		new_bid_id = -1;
		next_t = 0;
		lastbid_id = -1;
		lastmkt_id = -1;
		if (market==NULL)
			throw "market is not defined";
		thismkt_id = (int64*)gl_get_addr(market,"market_id");
		if (thismkt_id==NULL)
			throw "market does not define market_id";
		return SUCCESS;
	};
	intrinsic sync (TIMESTAMP t0, TIMESTAMP t1)
	{
		if (t1==next_t || next_t==0)
		{
			next_t=t1+bid_period;
			lastbid_id = (int32)submit_bid(market,my,role==BUYER?-quantity:quantity,price,*thismkt_id!=lastmkt_id?new_bid_id:lastbid_id);
			count--;
			lastmkt_id = *thismkt_id;
		}
		if (count>0)
			return next_t;
		else
			return TS_NEVER;
	};
}

object test {
	name buyer1;
	role BUYER;
	bid_period 3600;
	market Market_1;
	price 31;
	quantity 5;
	count 10000;
};

object test {
	name buyer2;
	role BUYER;
	bid_period 3600;
	market Market_1;
	price 63;
	quantity 5;
	count 10000;
}

object test {
	name buyer3;
	role BUYER;
	bid_period 3600;
	market Market_1;
	price 47;
	quantity 5;
	count 10000;
}
