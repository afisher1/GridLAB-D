// Design a market with unbalanced period and latency settings. Try setting the period larger than the 
// latency and vice-versa. Ensure the market clears at the correct interval and is becoming active at 
// the proper time. Ensure that highly delayed markets (latency much larger than the period) are 
// stored properly, and that the correct cleared market becomes active at the proper time. Also ensure the 
// past_market, current_market, and next_market quantities are being properly updated through these transitions. 
// Include tests of 0 latency (cleared market immediately becomes the current market). 

#set tmp=../test_market_auction_timing_4
#setenv path=c:/mingw/bin
#setenv INCLUDE=c:/mingw/include
#set include=../../../core
#set suppress_repeat_messages=0

module tape;
module market;
module assert;

clock {
	timezone PST+8PDT;
	starttime '2001-01-01 00:00:00';
	stoptime '2001-01-14 00:00:00';
}

schedule buyer_price {
	* * * * * 10;
}

schedule seller_1_price {
	* 0-5 * * * 10;
	* 6-8 * * * 30;
	* 9-17 * * * 15;
	* 18-21 * * * 20;
	* 22-23 * * * 70;
}

schedule seller_2_price {
	* 0-5 * * * 20;
	* 6-8 * * * 40;
	* 9-17 * * * 20;
	* 18-21 * * * 30;
	* 22-23 * * * 80;
}

schedule seller_3_price {
	* 0-5 * * * 40;
	* 6-8 * * * 60;
	* 9-17 * * * 40;
	* 18-21 * * * 50;
	* 22-23 * * * 100;
}

schedule buyer_quantity {
	* 0-5 * * * 1;
	* 6-8 * * * 5;
	* 9-17 * * * 2;
	* 18-21 * * * 10;
	* 22-23 * * * 3;
}

schedule seller_quantity {
	* 0-5 * * * 3;
	* 6-8 * * * 7;
	* 9-17 * * * 2;
	* 18-21 * * * 15;
	* 22-23 * * * 3;
}

object auction {
	name Market_1;
	latency 1wk;
	warmup 0;
	type DOUBLE;
	unit MWh;
	period 3600;
	init_price 0;
	verbose TRUE;
	special_mode NONE;
	object recorder {
		property past_market.clearing_price,past_market.clearing_quantity,current_market.clearing_price,current_market.clearing_quantity,next_market.clearing_price,next_market.clearing_quantity;
		file "test_market_timing_4.csv";
		interval 3600;
		limit 10000;
	};
	object double_assert{
		target "next_market.clearing_price";
		in '2001-01-08 06:00:00';
		out '2001-01-08 08:00:00';
		status ASSERT_TRUE;
		value 30;
		within 0.001; // asserting clearing price within 1 percent of result
	};
	object double_assert{
		target "current_market.clearing_price";
		in '2001-01-08 07:00:00';
		out '2001-01-08 09:00:00';
		status ASSERT_TRUE;
		value 30;
		within 0.001; // asserting clearing price within 1 percent of result
	};
	object double_assert{
		target "past_market.clearing_price";
		in '2001-01-08 08:00:00';
		out '2001-01-08 10:00:00';
		status ASSERT_TRUE;
		value 30;
		within 0.001; // asserting clearing price within 1 percent of result
	};
		object double_assert{
		target "next_market.clearing_quantity";
		in '2001-01-08 06:00:00';
		out '2001-01-08 08:00:00';
		status ASSERT_TRUE;
		value 7;
		within 0.001; // asserting clearing price within 1 percent of result
	};
	object double_assert{
		target "current_market.clearing_quantity";
		in '2001-01-08 07:00:00';
		out '2001-01-08 09:00:00';
		status ASSERT_TRUE;
		value 7;
		within 0.001; // asserting clearing price within 1 percent of result
	};
	object double_assert{
		target "past_market.clearing_quantity";
		in '2001-01-08 08:00:00';
		out '2001-01-08 10:00:00';
		status ASSERT_TRUE;
		value 7;
		within 0.001; // asserting clearing price within 1 percent of result
	};
}

// test object to create simple buyers and sellers
class test {
	int64 next_t;
	int64 new_bid_id;
	double bid_period;
	int16 count;
	object market;
	enumeration {BUYER=0, SELLER=1} role;
	int32 lastbid_id;
	int64 lastmkt_id;
	double price;		//Added in so price can be specified
	double quantity;	//Added in so quantity can be specified
	public int64 *thismkt_id;
	function auction::submit_bid;
	intrinsic create (object parent)
	{
		return SUCCESS;
	};
	intrinsic init (object parent)
	{
		new_bid_id = -1;
		next_t = 0;
		lastbid_id = -1;
		lastmkt_id = -1;
		if (market==NULL)
			throw "market is not defined";
		thismkt_id = (int64*)gl_get_addr(market,"market_id");
		if (thismkt_id==NULL)
			throw "market does not define market_id";
		return SUCCESS;
	};
	intrinsic sync (TIMESTAMP t0, TIMESTAMP t1)
	{
		if (t1==next_t || next_t==0)
		{
			next_t=t1+bid_period;
			lastbid_id = (int32)submit_bid(market,my,role==BUYER?-quantity:quantity,price,*thismkt_id!=lastmkt_id?new_bid_id:lastbid_id);
			count--;
			lastmkt_id = *thismkt_id;
		}
		if (count>0)
			return next_t;
		else
			return TS_NEVER;
	};
}

object test {
	name buyer_1;
	role BUYER;
	bid_period 3600;
	market Market_1;
	price buyer_price*1;
	quantity buyer_quantity*1;
	count 10000;
}

object test {
	name buyer_2;
	role BUYER;
	bid_period 900;
	market Market_1;
	price buyer_price*3;
	quantity buyer_quantity*1;
	count 10000;
}

object test {
	name buyer_3;
	role BUYER;
	bid_period 300;
	market Market_1;
	price buyer_price*5;
	quantity buyer_quantity*1;
	count 10000;
}

object test {
	name seller_1;
	role SELLER;
	bid_period 3600;
	market Market_1;
	price seller_1_price*1;
	quantity seller_quantity*1;
	count 10000;
}

object test {
	name seller_2;
	role SELLER;
	bid_period 900;
	market Market_1;
	price seller_2_price*1;
	quantity seller_quantity*1;
	count 10000;
}

object test {
	name seller_3;
	role SELLER;
	bid_period 300;
	market Market_1;
	price seller_3_price*1;
	quantity seller_quantity*1;
	count 10000;
}