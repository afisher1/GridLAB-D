// test_unitless_bid_quantity_err.glm tests to see if there is a catch for unitless capacity_reference_property into an auction

 
#set tmp=../test_unitless_bid_quantity_err
#setenv GLPATH=../../../core;../../../core/etc
#setenv GRIDLABD=../../../core
#set include=../../../core
#set suppress_repeat_messages=0

module market;
module assert;
module tape;

clock {
	timezone PST+8PDT;
	starttime '2001-01-01 00:00:00';
	stoptime '2001-01-03 00:00:00';
}


// test object to create simple buyers and sellers
class test {
	int64 next_t;
	int64 new_bid_id;
	double bid_period;
	int16 count;
	object market;
	enumeration {BUYER=0, SELLER=1} role;
	int32 lastbid_id;
	int64 lastmkt_id;
	double price;		// Added in so price can be specified
	double quantity;	// Added in so quantity can be specified
	public int64 *thismkt_id;
	function auction::submit_bid;
	intrinsic create (object parent)
	{
		return SUCCESS;
	};
	intrinsic init (object parent)
	{
		new_bid_id = -1;
		next_t = 0;
		lastbid_id = -1;
		lastmkt_id = -1;
		if (market==NULL)
			throw "market is not defined";
		thismkt_id = (int64*)gl_get_addr(market,"market_id");
		if (thismkt_id==NULL)
			throw "market does not define market_id";
		return SUCCESS;
	};
	intrinsic sync (TIMESTAMP t0, TIMESTAMP t1)
	{
		if (t1==next_t || next_t==0)
		{
			next_t=t1+bid_period;
			lastbid_id = (int32)submit_bid(market,my,role==BUYER?-quantity:quantity,price,*thismkt_id!=lastmkt_id?new_bid_id:lastbid_id);
			count--;
			lastmkt_id = *thismkt_id;
		}
		if (count>0)
			return next_t;
		else
			return TS_NEVER;
	};
}

object auction {
	name Market;
	unit "MW";
	type DOUBLE;
	period 3600;
	pricecap 9999;
	verbose TRUE;
	capacity_reference_object SELLER_1;
	capacity_reference_property quantity;
	warmup 0;
	special_mode NONE;
	object recorder {
		property current_market.clearing_price,current_market.clearing_quantity,current_market.clearing_type;
		file test_auction_exact_failure.csv;
		interval 3600;
		limit 72;
	};
}

object test {
	name SELLER_1;
	role SELLER;
	bid_period 3600;
	count 10000;
	price 10;
	quantity 10;
	market Market;
}

object test {
	name SELLER_2;
	role SELLER;
	bid_period 3600;
	count 10000;
	price 16;
	quantity 2;
	market Market;
}

object test {
	name BUYER_1;
	role BUYER;
	bid_period 3600;
	count 10000;
	price 9999;
	quantity 15;
	market Market;
}

object test {
	name BUYER_2;
	role BUYER;
	bid_period 3600;
	count 10000;
	price 0;
	quantity 12;
	market Market;
}
